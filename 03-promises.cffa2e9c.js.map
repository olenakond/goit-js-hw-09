{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAeC,SAASC,cAAc,uBACtCC,EAAcF,SAASC,cAAc,sBACrCE,EAAgBH,SAASC,cAAc,wBAK7C,SAASG,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACaC,KAAKC,SAAW,GAEpCJ,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CAbMN,SAASC,cAAc,UAE/BY,iBAAiB,SAe5B,SAAoBC,GAClBA,EAAMC,iBAEN,SAAwBC,EAAOC,EAAMC,GAEnC,GAAIF,EAAQ,GAAKC,EAAO,GAAKC,GAAU,EAErC,YADAC,EAAAtB,GAASuB,OAAOC,QAAQ,+BAI1B,IAAIC,EAAiBN,EACrB,IAAK,IAAIO,EAAI,EAAGA,GAAKL,EAAQK,GAAK,EAChCnB,EAAcmB,EAAGD,GACdE,MAAK,EAACnB,SAAEA,EAAQC,MAAEA,MACjBa,EAAAtB,GAASuB,OAAOK,QACd,uBAAqBpB,QAAiBC,MAAU,IAGnDoB,OAAM,EAACrB,SAAEA,EAAQC,MAAEA,MAClBa,EAAAtB,GAASuB,OAAOC,QACd,sBAAoBhB,QAAeC,MAAU,IAGnDgB,GAAkBL,C,CAGtBU,CACEC,OAAO7B,EAAa8B,OACpBD,OAAO1B,EAAY2B,OACnBD,OAAOzB,EAAc0B,O","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst delayElement = document.querySelector('input[name=\"delay\"]');\nconst stepElement = document.querySelector('input[name=\"step\"]');\nconst amountElement = document.querySelector('input[name=\"amount\"]');\nconst btnElement = document.querySelector('button');\n\nbtnElement.addEventListener('click', onClickBtn);\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nfunction onClickBtn(event) {\n  event.preventDefault();\n\n  function createPromises(delay, step, amount) {\n    \n    if (delay < 0 || step < 0 || amount <= 0) {\n      Notiflix.Notify.failure('Please enter valid numbers!');\n      return\n    }\n    \n    let delayOfPromise = delay;\n    for (let i = 1; i <= amount; i += 1) {\n      createPromise(i, delayOfPromise)\n        .then(({ position, delay }) => {\n          Notiflix.Notify.success(\n            `✅ Fulfilled promise ${position} in ${delay}ms`\n          );\n        })\n        .catch(({ position, delay }) => {\n          Notiflix.Notify.failure(\n            `❌ Rejected promise ${position} in ${delay}ms`\n          );\n        });\n      delayOfPromise += step;\n    }\n  }\n  createPromises(\n    Number(delayElement.value),\n    Number(stepElement.value),\n    Number(amountElement.value)\n  );\n}\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$delayElement","document","querySelector","$47d4ff9957288465$var$stepElement","$47d4ff9957288465$var$amountElement","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","addEventListener","event","preventDefault","delay1","step","amount","$parcel$interopDefault","Notify","failure","delayOfPromise","i","then","success","catch","createPromises","Number","value"],"version":3,"file":"03-promises.cffa2e9c.js.map"}